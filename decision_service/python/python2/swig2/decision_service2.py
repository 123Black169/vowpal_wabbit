# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_decision_service2', [dirname(__file__)])
        except ImportError:
            import _decision_service2
            return _decision_service2
        if fp is not None:
            try:
                _mod = imp.load_module('_decision_service2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _decision_service2 = swig_import_helper()
    del swig_import_helper
else:
    import _decision_service2
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _decision_service2.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _decision_service2.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _decision_service2.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _decision_service2.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _decision_service2.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _decision_service2.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _decision_service2.SwigPyIterator_copy(self)


    def next(self):
        """
        next(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _decision_service2.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _decision_service2.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _decision_service2.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _decision_service2.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _decision_service2.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _decision_service2.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _decision_service2.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _decision_service2.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _decision_service2.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _decision_service2.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _decision_service2.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _decision_service2.IntVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _decision_service2.IntVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _decision_service2.IntVector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _decision_service2.IntVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> IntVector

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _decision_service2.IntVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _decision_service2.IntVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _decision_service2.IntVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _decision_service2.IntVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IntVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _decision_service2.IntVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _decision_service2.IntVector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< int >::value_type

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _decision_service2.IntVector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _decision_service2.IntVector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _decision_service2.IntVector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _decision_service2.IntVector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _decision_service2.IntVector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _decision_service2.IntVector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _decision_service2.IntVector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _decision_service2.IntVector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _decision_service2.IntVector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _decision_service2.IntVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< int >::allocator_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _decision_service2.IntVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _decision_service2.IntVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(self, first, last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _decision_service2.IntVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> IntVector
        __init__(self, arg2) -> IntVector

        Parameters
        ----------
        arg2: std::vector< int > const &

        __init__(self, size) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(self, size, value) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        this = _decision_service2.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _decision_service2.IntVector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _decision_service2.IntVector_front(self)


    def back(self):
        """
        back(self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _decision_service2.IntVector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _decision_service2.IntVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _decision_service2.IntVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _decision_service2.IntVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _decision_service2.IntVector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _decision_service2.IntVector_capacity(self)

    __swig_destroy__ = _decision_service2.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _decision_service2.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    """Proxy of C++ std::vector<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _decision_service2.FloatVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _decision_service2.FloatVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _decision_service2.FloatVector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _decision_service2.FloatVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> FloatVector

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _decision_service2.FloatVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type
        v: std::vector< float,std::allocator< float > > const &

        """
        return _decision_service2.FloatVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _decision_service2.FloatVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< float >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _decision_service2.FloatVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> FloatVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< float >::value_type const &

        Parameters
        ----------
        i: std::vector< float >::difference_type

        """
        return _decision_service2.FloatVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< float,std::allocator< float > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        x: std::vector< float >::value_type const &

        """
        return _decision_service2.FloatVector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< float >::value_type

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _decision_service2.FloatVector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _decision_service2.FloatVector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _decision_service2.FloatVector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _decision_service2.FloatVector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< float > &

        """
        return _decision_service2.FloatVector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< float >::iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _decision_service2.FloatVector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< float >::iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _decision_service2.FloatVector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< float >::reverse_iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _decision_service2.FloatVector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< float >::reverse_iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _decision_service2.FloatVector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _decision_service2.FloatVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< float >::allocator_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _decision_service2.FloatVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _decision_service2.FloatVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator

        erase(self, first, last) -> std::vector< float >::iterator

        Parameters
        ----------
        first: std::vector< float >::iterator
        last: std::vector< float >::iterator

        """
        return _decision_service2.FloatVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> FloatVector
        __init__(self, arg2) -> FloatVector

        Parameters
        ----------
        arg2: std::vector< float > const &

        __init__(self, size) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type

        __init__(self, size, value) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type
        value: std::vector< float >::value_type const &

        """
        this = _decision_service2.new_FloatVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _decision_service2.FloatVector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< float >::value_type const &

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _decision_service2.FloatVector_front(self)


    def back(self):
        """
        back(self) -> std::vector< float >::value_type const &

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _decision_service2.FloatVector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _decision_service2.FloatVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< float >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _decision_service2.FloatVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator
        x: std::vector< float >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< float >::iterator
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _decision_service2.FloatVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< float >::size_type

        """
        return _decision_service2.FloatVector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _decision_service2.FloatVector_capacity(self)

    __swig_destroy__ = _decision_service2.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _decision_service2.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class RankResponse(_object):
    """Proxy of C++ RankResponse class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RankResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RankResponse, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["event_id"] = _decision_service2.RankResponse_event_id_get
    if _newclass:
        event_id = _swig_property(_decision_service2.RankResponse_event_id_get)
    __swig_getmethods__["model_version"] = _decision_service2.RankResponse_model_version_get
    if _newclass:
        model_version = _swig_property(_decision_service2.RankResponse_model_version_get)

    def top_action(self):
        """
        top_action(self) -> int

        Parameters
        ----------
        self: RankResponse *

        """
        return _decision_service2.RankResponse_top_action(self)


    def probabilities(self):
        """
        probabilities(self) -> FloatVector

        Parameters
        ----------
        self: RankResponse *

        """
        return _decision_service2.RankResponse_probabilities(self)


    def ranking(self):
        """
        ranking(self) -> IntVector

        Parameters
        ----------
        self: RankResponse *

        """
        return _decision_service2.RankResponse_ranking(self)

    __swig_destroy__ = _decision_service2.delete_RankResponse
    __del__ = lambda self: None
RankResponse_swigregister = _decision_service2.RankResponse_swigregister
RankResponse_swigregister(RankResponse)


_decision_service2.none_swigconstant(_decision_service2)
none = _decision_service2.none

_decision_service2.error_swigconstant(_decision_service2)
error = _decision_service2.error

_decision_service2.warning_swigconstant(_decision_service2)
warning = _decision_service2.warning

_decision_service2.trace_swigconstant(_decision_service2)
trace = _decision_service2.trace
class DecisionServiceLogger(_object):
    """Proxy of C++ DecisionServiceLogger class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecisionServiceLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecisionServiceLogger, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _decision_service2.delete_DecisionServiceLogger
    __del__ = lambda self: None

    def log(self, level, message):
        """
        log(self, level, message)

        Parameters
        ----------
        level: enum DecisionServiceLogLevel
        message: std::string const &

        """
        return _decision_service2.DecisionServiceLogger_log(self, level, message)


    def __init__(self):
        """
        __init__(self) -> DecisionServiceLogger

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == DecisionServiceLogger:
            _self = None
        else:
            _self = self
        this = _decision_service2.new_DecisionServiceLogger(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _decision_service2.disown_DecisionServiceLogger(self)
        return weakref_proxy(self)
DecisionServiceLogger_swigregister = _decision_service2.DecisionServiceLogger_swigregister
DecisionServiceLogger_swigregister(DecisionServiceLogger)

class DecisionServiceConfiguration(_object):
    """Proxy of C++ DecisionServiceConfiguration class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecisionServiceConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecisionServiceConfiguration, name)
    __repr__ = _swig_repr

    def Download(url):
        """
        Download(url) -> DecisionServiceConfiguration

        Parameters
        ----------
        url: char const *

        """
        return _decision_service2.DecisionServiceConfiguration_Download(url)

    if _newclass:
        Download = staticmethod(Download)
    __swig_getmethods__["Download"] = lambda x: Download

    def __init__(self):
        """__init__(self) -> DecisionServiceConfiguration"""
        this = _decision_service2.new_DecisionServiceConfiguration()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["model_url"] = _decision_service2.DecisionServiceConfiguration_model_url_set
    __swig_getmethods__["model_url"] = _decision_service2.DecisionServiceConfiguration_model_url_get
    if _newclass:
        model_url = _swig_property(_decision_service2.DecisionServiceConfiguration_model_url_get, _decision_service2.DecisionServiceConfiguration_model_url_set)
    __swig_setmethods__["eventhub_interaction_connection_string"] = _decision_service2.DecisionServiceConfiguration_eventhub_interaction_connection_string_set
    __swig_getmethods__["eventhub_interaction_connection_string"] = _decision_service2.DecisionServiceConfiguration_eventhub_interaction_connection_string_get
    if _newclass:
        eventhub_interaction_connection_string = _swig_property(_decision_service2.DecisionServiceConfiguration_eventhub_interaction_connection_string_get, _decision_service2.DecisionServiceConfiguration_eventhub_interaction_connection_string_set)
    __swig_setmethods__["eventhub_observation_connection_string"] = _decision_service2.DecisionServiceConfiguration_eventhub_observation_connection_string_set
    __swig_getmethods__["eventhub_observation_connection_string"] = _decision_service2.DecisionServiceConfiguration_eventhub_observation_connection_string_get
    if _newclass:
        eventhub_observation_connection_string = _swig_property(_decision_service2.DecisionServiceConfiguration_eventhub_observation_connection_string_get, _decision_service2.DecisionServiceConfiguration_eventhub_observation_connection_string_set)
    __swig_setmethods__["certificate_validation_enabled"] = _decision_service2.DecisionServiceConfiguration_certificate_validation_enabled_set
    __swig_getmethods__["certificate_validation_enabled"] = _decision_service2.DecisionServiceConfiguration_certificate_validation_enabled_get
    if _newclass:
        certificate_validation_enabled = _swig_property(_decision_service2.DecisionServiceConfiguration_certificate_validation_enabled_get, _decision_service2.DecisionServiceConfiguration_certificate_validation_enabled_set)
    __swig_setmethods__["num_parallel_connection"] = _decision_service2.DecisionServiceConfiguration_num_parallel_connection_set
    __swig_getmethods__["num_parallel_connection"] = _decision_service2.DecisionServiceConfiguration_num_parallel_connection_get
    if _newclass:
        num_parallel_connection = _swig_property(_decision_service2.DecisionServiceConfiguration_num_parallel_connection_get, _decision_service2.DecisionServiceConfiguration_num_parallel_connection_set)
    __swig_setmethods__["batching_timeout_in_milliseconds"] = _decision_service2.DecisionServiceConfiguration_batching_timeout_in_milliseconds_set
    __swig_getmethods__["batching_timeout_in_milliseconds"] = _decision_service2.DecisionServiceConfiguration_batching_timeout_in_milliseconds_get
    if _newclass:
        batching_timeout_in_milliseconds = _swig_property(_decision_service2.DecisionServiceConfiguration_batching_timeout_in_milliseconds_get, _decision_service2.DecisionServiceConfiguration_batching_timeout_in_milliseconds_set)
    __swig_setmethods__["batching_queue_max_size"] = _decision_service2.DecisionServiceConfiguration_batching_queue_max_size_set
    __swig_getmethods__["batching_queue_max_size"] = _decision_service2.DecisionServiceConfiguration_batching_queue_max_size_get
    if _newclass:
        batching_queue_max_size = _swig_property(_decision_service2.DecisionServiceConfiguration_batching_queue_max_size_get, _decision_service2.DecisionServiceConfiguration_batching_queue_max_size_set)
    __swig_setmethods__["explorer"] = _decision_service2.DecisionServiceConfiguration_explorer_set
    __swig_getmethods__["explorer"] = _decision_service2.DecisionServiceConfiguration_explorer_get
    if _newclass:
        explorer = _swig_property(_decision_service2.DecisionServiceConfiguration_explorer_get, _decision_service2.DecisionServiceConfiguration_explorer_set)
    __swig_setmethods__["log_level"] = _decision_service2.DecisionServiceConfiguration_log_level_set
    __swig_getmethods__["log_level"] = _decision_service2.DecisionServiceConfiguration_log_level_get
    if _newclass:
        log_level = _swig_property(_decision_service2.DecisionServiceConfiguration_log_level_get, _decision_service2.DecisionServiceConfiguration_log_level_set)
    __swig_setmethods__["logger"] = _decision_service2.DecisionServiceConfiguration_logger_set
    __swig_getmethods__["logger"] = _decision_service2.DecisionServiceConfiguration_logger_get
    if _newclass:
        logger = _swig_property(_decision_service2.DecisionServiceConfiguration_logger_get, _decision_service2.DecisionServiceConfiguration_logger_set)
    __swig_destroy__ = _decision_service2.delete_DecisionServiceConfiguration
    __del__ = lambda self: None
DecisionServiceConfiguration_swigregister = _decision_service2.DecisionServiceConfiguration_swigregister
DecisionServiceConfiguration_swigregister(DecisionServiceConfiguration)

def DecisionServiceConfiguration_Download(url):
    """
    DecisionServiceConfiguration_Download(url) -> DecisionServiceConfiguration

    Parameters
    ----------
    url: char const *

    """
    return _decision_service2.DecisionServiceConfiguration_Download(url)

class DecisionServiceClient(_object):
    """Proxy of C++ DecisionServiceClient class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecisionServiceClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecisionServiceClient, name)
    __repr__ = _swig_repr

    def __init__(self, config):
        """
        __init__(self, config) -> DecisionServiceClient

        Parameters
        ----------
        config: DecisionServiceConfiguration &

        """
        this = _decision_service2.new_DecisionServiceClient(config)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _decision_service2.delete_DecisionServiceClient
    __del__ = lambda self: None

    def rank(self, features, event_id, scores):
        """
        rank(self, features, event_id, scores) -> RankResponse

        Parameters
        ----------
        features: char const *
        event_id: char const *
        scores: std::vector< float,std::allocator< float > > const &

        """
        return _decision_service2.DecisionServiceClient_rank(self, features, event_id, scores)


    def rank2(self, features, event_id, predictors):
        """
        rank2(self, features, event_id, predictors) -> RankResponse

        Parameters
        ----------
        features: char const *
        event_id: char const *
        predictors: DecisionServicePredictors *

        """
        return _decision_service2.DecisionServiceClient_rank2(self, features, event_id, predictors)


    def reward(self, event_id, reward):
        """
        reward(self, event_id, reward)

        Parameters
        ----------
        event_id: char const *
        reward: char const *

        """
        return _decision_service2.DecisionServiceClient_reward(self, event_id, reward)


    def update_model(self, model):
        """
        update_model(self, model)

        Parameters
        ----------
        model: unsigned char *

        """
        return _decision_service2.DecisionServiceClient_update_model(self, model)

DecisionServiceClient_swigregister = _decision_service2.DecisionServiceClient_swigregister
DecisionServiceClient_swigregister(DecisionServiceClient)

# This file is compatible with both classic and new-style classes.


